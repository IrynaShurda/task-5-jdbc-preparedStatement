import java.io.IOException;import java.nio.file.Files;import java.nio.file.Paths;import java.sql.Date;import java.sql.PreparedStatement;import java.sql.SQLException;import java.util.List;public class DatabasePopulateService {    public static final String SQL_POPULATE_CLIENTS_SQL = "sql/populate_clients.sql";    public static final String SQL_POPULATE_WORKERS_SQL = "sql/populate_workers.sql";    public static final String SQL_POPULATE_PROJECTS_SQL = "sql/populate_projects.sql";    public static final String SQL_POPULATE_PROJECT_WORKERS_SQL = "sql/populate_project_workers.sql";    static Database instance = Database.getInstance();    public static void main(String[] args) throws SQLException, IOException {        DatabasePopulateService databasePopulateServiceForWorkers = new DatabasePopulateService();        databasePopulateServiceForWorkers.insertWorkers();        DatabasePopulateService databasePopulateServiceForClients = new DatabasePopulateService();        databasePopulateServiceForClients.insertClients();        DatabasePopulateService databasePopulateServiceForProjects = new DatabasePopulateService();        databasePopulateServiceForProjects.insertProjects();        DatabasePopulateService databasePopulateServiceForProjectWorkers = new DatabasePopulateService();        databasePopulateServiceForProjectWorkers.insertProjectWorkers();    }    public void insertWorkers() throws SQLException, IOException {        List<String> data = Files.readAllLines(Paths.get(SQL_POPULATE_WORKERS_SQL));        String sql = "INSERT INTO worker (NAME, BIRTHDAY, LEVEL, SALARY) VALUES (?, ?, ?, ?)";        try (PreparedStatement statement = instance.getConnection().prepareStatement(sql)) {            for (String line : data) {                String[] columns = line.split(", ");                String name = columns[0];                Date birthday = Date.valueOf(columns[1]);                String level = columns[2];                long salary = Long.parseLong(columns[3]);                statement.setString(1, name);                statement.setDate(2, birthday);                statement.setString(3, level);                statement.setLong(4, salary);                statement.executeUpdate();            }        }    }    public void insertClients() throws IOException, SQLException {        List<String> data = Files.readAllLines(Paths.get(SQL_POPULATE_CLIENTS_SQL));        String sql = "INSERT INTO client (ID, NAME) VALUES (?, ?)";        try (PreparedStatement statement = instance.getConnection().prepareStatement(sql)) {            for (String line : data) {                String[] columns = line.split(", ");                long id = Long.parseLong(columns[0]);                String name = columns[1];                statement.setLong(1, id);                statement.setString(2, name);                statement.executeUpdate();            }        }    }    public void insertProjects() throws IOException, SQLException {        List<String> data = Files.readAllLines(Paths.get(SQL_POPULATE_PROJECTS_SQL));        String sql = "INSERT INTO project (ID, CLIENT_ID, START_DATE, FINISH_DATE) VALUES (?, ?, ?, ?)";        try (PreparedStatement statement = instance.getConnection().prepareStatement(sql)) {            for (String line : data) {                String[] columns = line.split(", ");                long id = Long.parseLong(columns[0]);                long client_id = Long.parseLong(columns[1]);                Date start_date = Date.valueOf(columns[2]);                Date finish_date = Date.valueOf(columns[3]);                statement.setLong(1, id);                statement.setLong(2, client_id);                statement.setDate(3, start_date);                statement.setDate(4, finish_date);                statement.executeUpdate();            }        }    }    public void insertProjectWorkers() throws IOException, SQLException {        List<String> data = Files.readAllLines(Paths.get(SQL_POPULATE_PROJECT_WORKERS_SQL));        String sql = "INSERT INTO project_worker (PROJECT_ID, WORKER_ID) VALUES (?, ?)";        try (PreparedStatement statement = instance.getConnection().prepareStatement(sql)) {            for (String line : data) {                String[] columns = line.split(", ");                long project_id = Long.parseLong(columns[0]);                long worker_id = Long.parseLong(columns[1]);                statement.setLong(1, project_id);                statement.setLong(2, worker_id);                statement.executeUpdate();            }        }    }}